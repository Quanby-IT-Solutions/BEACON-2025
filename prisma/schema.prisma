// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//=================================
// ENUM
//=================================
// ENUM

enum UserType {
  SEAFARER
  CORPORATE_PROFESSIONAL
  STUDENTS
  OTHERS
  SUPERADMIN
}

enum Sex {
  MALE
  FEMALE
  OTHER
}

enum ActiveStatus {
  ACTIVE
  INACTIVE
  PENDING
  VISITOR
}

// BEACON 2025 Registration Enums
enum Gender {
  MALE
  FEMALE
  PREFER_NOT_TO_SAY
  OTHERS
}

enum AgeBracket {
  UNDER_18
  AGE_18_24
  AGE_25_34
  AGE_35_44
  AGE_45_54
  AGE_55_ABOVE
}

enum Industry {
  MARITIME
  GOVERNMENT
  TOURISM_HOSPITALITY
  SHIPBUILDING_REPAIR
  NGO_DEVELOPMENT
  MEDIA_PRESS
  OTHERS
}

enum EventDay {
  SEPT_29
  SEPT_30
  OCT_1
}

enum AttendeeType {
  TRADE_VISITOR
  GOVERNMENT_OFFICIAL
  STUDENT_ACADEMIC
  MEDIA_PRESS
  EXHIBITOR
  SPEAKER_PANELIST
  VIP_GUEST
}

enum InterestArea {
  MARITIME_NAVAL_TECH
  SHIPBUILDING_REPAIR
  SHIPPING_MANNING
  GREEN_SUSTAINABLE
  MARINE_TOURISM
  INNOVATION_DIGITAL
  MARITIME_EDUCATION
  BLUE_ECONOMY
  LUXURY_BOATS_YACHTS
}

enum HearAboutEvent {
  FACEBOOK_SOCIAL_MEDIA
  WEBSITE
  EMAIL_INVITATION
  REFERRED_BY_FRIEND
  PARTICIPATED_LAST_YEAR
  OTHER
}

// Additional Conference-specific Enums
enum MaritimeLeagueMembership {
  YES
  NO
}

enum PaymentMode {
  BANK_DEPOSIT_TRANSFER
  GCASH
  WALK_IN_ON_SITE
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
  REFUNDED
}

enum ConferenceInterestArea {
  SHIPBUILDING_SHIP_REPAIR
  BOATBUILDING_YACHT_BUILDING
  MARINE_TECHNOLOGY
  NAVAL_DEFENSE_SECURITY
  MARITIME_TOURISM
  INNOVATION_SUSTAINABILITY
  BLUE_ECONOMY
  LIFESTYLE_FASHION
  WOMEN_YOUTH_IN_MARITIME
  OTHERS
}

//=================================
// MODELS
//=================================
model ManagerAccount {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  username  String        @unique
  password  String // Store hashed password
  status    ManagerStatus
  isActive  Boolean       @default(true)

  @@map("manager_accounts")
}

model User {
  id           String         @id @default(cuid())
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  UserAccounts UserAccounts[]
  UserDetails  UserDetails[]
  Visitors     Visitors[]
  Conferences  Conference[]

  CodeDistribution CodeDistribution[]
}

model UserAccounts {
  id             String       @id @default(uuid())
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  status         ActiveStatus @default(PENDING)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // Section 2: Account Details
  email          String       @unique
  mobileNumber   String
  mailingAddress String?
  landline       String?
}

model UserDetails {
  id             String     @id @default(uuid())
  userId         String
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // Section 1: Personal Information
  firstName      String
  lastName       String
  middleName     String?
  suffix         String?
  preferredName  String?
  faceScannedUrl String?
  gender         Gender // there will be others input field genderOthers
  genderOthers   String?
  ageBracket     AgeBracket
  nationality    String
}

// BEACON 2025 Registration Models
model Visitors {
  id             String   @id @default(uuid())
  userId         String?
  // Section 3: Professional Information
  jobTitle       String
  companyName    String
  industry       Industry // there will be others input field industryOthers
  industryOthers String?
  companyAddress String?
  companyWebsite String?
  businessEmail  String?

  // Section 4: Interests & Preferences
  attendingDays        EventDay[]
  eventParts           String[] // This is a EXPO, CONFERENCE, PHILIPPINE IN-WATER SHIP & BOAT SHOW, BLUE RUNWAY, NETWORKING & AWARDS NIGHT
  attendeeType         AttendeeType
  interestAreas        InterestArea[]
  receiveUpdates       Boolean        @default(false)
  inviteToFutureEvents Boolean        @default(false)

  // Section 5: Accessibility & Safety
  specialAssistance      String?
  emergencyContactPerson String
  emergencyContactNumber String

  // Section 6: Consent
  dataPrivacyConsent Boolean
  hearAboutEvent     HearAboutEvent // there will be others input field hearAboutOthers
  hearAboutOthers    String?

  // System fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

// BEACON 2025 Conference-specific Registration Model

model Conference {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Section 1: Maritime League Membership
  isMaritimeLeagueMember MaritimeLeagueMembership
  tmlMemberCode          String?

  // Section 3: Professional Information
  jobTitle       String?
  companyName    String?
  industry       String?
  companyAddress String?
  companyWebsite String?

  // Section 4: Areas of Interest
  interestAreas       ConferenceInterestArea[]
  otherInterests      String?
  receiveEventInvites Boolean                  @default(false)

  // Section 5: Payment Details (calculated field based on selections)
  totalPaymentAmount  Decimal?
  customPaymentAmount String? // For "Other amount" field

  // Section 6: Consent & Confirmation
  emailCertificate  Boolean @default(false)
  photoVideoConsent Boolean @default(false)
  dataUsageConsent  Boolean // Required field

  // Payment Processing (for non-maritime league members)
  paymentToken       String? // Token for payment link
  paymentTokenExpiry DateTime? // 3-hour expiration
  requiresPayment    Boolean   @default(false) // Based on maritime league membership

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  ConferencePayment ConferencePayment?
  summaryOfPayments SummaryOfPayments[] // One-to-many with selected events

  @@map("conferences")
}

// Conference Payment Model - ONLY for Conference registrations
model ConferencePayment {
  id           String   @id @default(uuid())
  conferenceId String   @unique // One payment per conference registration
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Payment Details - Conference Specific
  totalAmount         Decimal
  paymentMode         PaymentMode
  paymentStatus       PaymentStatus @default(PENDING)
  customPaymentAmount String? // For "Other amount" field from form
  transactionId       String?
  proofOfPaymentUrl   String? // File path or URL for uploaded proof
  paymentDate         DateTime?

  // PayMongo Integration Fields
  paymongoPaymentId     String? // PayMongo payment ID
  paymongoCheckoutId    String? // PayMongo checkout session ID
  paymongoIntentId      String? // PayMongo payment intent ID
  paymongoWebhookId     String? // PayMongo webhook event ID for confirmation
  paymongoPaymentMethod String? // card, gcash, grabpay, etc.
  paymongoReferenceId   String? // PayMongo reference number

  // Payment Confirmation
  isPaid             Boolean   @default(false) // Confirmed payment status
  paymentConfirmedAt DateTime? // When payment was confirmed
  paymentConfirmedBy String? // webhook, manual, etc.

  // Payment Notes
  notes String?

  // Relations - ONLY linked to Conference
  conference Conference @relation(fields: [conferenceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("conference_payments")
}

model SummaryOfPayments {
  id           String          @id @default(uuid())
  eventName    String
  eventDate    DateTime
  eventPrice   Decimal
  eventStatus  EventStatusEnum
  conferenceId String
  eventId      String
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  conference Conference @relation(fields: [conferenceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  event      Events     @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Prevent duplicate event selections for same conference
  @@unique([conferenceId, eventId])
  @@map("summary_of_payments")
}

model Events {
  id          String          @id @default(uuid())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  eventName   String
  eventDate   DateTime
  eventPrice  Decimal
  eventStatus EventStatusEnum
  isActive    Boolean         @default(true)
  description String?
  eventStartTime DateTime?
  eventEndTime DateTime?

  // Relations
  summaryOfPayments SummaryOfPayments[]

  @@map("events")
}

model CodeDistribution {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  code      String   @unique
  isActive  Boolean  @default(false)
  userId    String? // User ID who used the code

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("code_distribution")
}

enum EventStatusEnum {
  CONFERENCE
  SHOW
  WORKSHOP
  SEMINAR
  EXHIBITION
}

enum ManagerStatus {
  SUPERADMIN
  ADMIN
}
